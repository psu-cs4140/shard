defmodule Shard.World do
  @moduledoc "Domain context for Rooms and Exits."

  import Ecto.Query, warn: false
  alias Shard.Repo
  alias Shard.World.{Room, Exit}

  ## Rooms

  def list_rooms do
    from(r in Room, order_by: [asc: r.name]) |> Repo.all()
  end

  def get_room!(id), do: Repo.get!(Room, id)

  def create_room(attrs \\ %{}) do
    %Room{} |> Room.changeset(attrs) |> Repo.insert()
  end

  def update_room(%Room{} = room, attrs) do
    room |> Room.changeset(attrs) |> Repo.update()
  end

  def delete_room(%Room{} = room), do: Repo.delete(room)

  def change_room(%Room{} = room, attrs \\ %{}) do
    Room.changeset(room, attrs)
  end

  ## Exits

  def list_exits do
    Repo.all(Exit)
  end

  def get_exit!(id), do: Repo.get!(Exit, id)

  def create_exit(attrs \\ %{}) do
    %Exit{} |> Exit.changeset(attrs) |> Repo.insert()
  end

  def update_exit(%Exit{} = ex, attrs) do
    ex |> Exit.changeset(attrs) |> Repo.update()
  end

  def delete_exit(%Exit{} = ex), do: Repo.delete(ex)

  def change_exit(%Exit{} = ex, attrs \\ %{}) do
    Exit.changeset(ex, attrs)
  end

  ## Game helpers

  @doc """
  Move from a room id in a direction ("n","s","e","w","up","down").
  Returns {:ok, dest_room} or {:error, :no_exit}.
  """
  def move(room_id, dir) when is_binary(dir) do
    _ = get_room!(room_id)

    case Repo.get_by(Exit, from_room_id: room_id, dir: dir) do
      %Exit{to_room_id: to_id} -> {:ok, get_room!(to_id)}
      _ -> {:error, :no_exit}
    end
  end
end
